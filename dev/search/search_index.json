{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Imops Efficient parallelizable algorithms for multidimensional arrays to speed up your data pipelines Install pip install imops # default install with Cython backend pip install imops [ numba ] # additionally install Numba backend Functions imops . radon . radon Fast implementation of Radon transform. Adapted from scikit-image. Parameters: Name Type Description Default image np . ndarray an array with at least 2 axes required axes Tuple [ int , int ] the axes in the image along which the Radon transform will be applied. The image shape along the axes must be of the same length None theta Union [ int , Sequence [ float ]] the angles for which the Radon transform will be computed. If it is an integer - the angles will be evenly distributed between 0 and 180, theta values in total 180 return_fill bool whether to return the value that fills the image outside the circle working area False num_threads int the number of threads to be used for parallel computation. By default - equals to the number of cpu cores -1 backend BackendLike the execution backend. Currently only \"Cython\" is avaliable None Returns: Name Type Description sinogram np . ndarray the result of the Radon transform fill_value float the value that fills the image outside the circle working area. Returned only if return_fill is True Examples: >>> sinogram = radon ( image ) # 2d image >>> sinogram , fill_value = radon ( image , return_fill = True ) # 2d image with fill value >>> sinogram = radon ( image , axes = ( - 2 , - 1 )) # nd image imops . radon . inverse_radon Fast implementation of inverse Radon transform. Adapted from scikit-image. Parameters: Name Type Description Default sinogram np . ndarray an array with at least 2 axes required axes Tuple [ int , int ] the axes in the image along which the Radon transform will be applied. The image shape along the axes must be of the same length None theta Union [ int , Sequence [ float ]] the angles for which the Radon transform will be computed. If it is an integer - the angles will be evenly distributed between 0 and 180, theta values in total 180 fill_value float the value that fills the image outside the circle working area. Can be returned by radon 0 a float the first parameter of the sharpen filter 0 b float the second parameter of the sharpen filter 1 num_threads int the number of threads to be used for parallel computation. By default - equals to the number of cpu cores -1 backend BackendLike the execution backend. Currently only \"Cython\" is avaliable None Returns: Name Type Description image np . ndarray the result of the inverse Radon transform Examples: >>> image = radon ( sinogram ) # 2d image >>> image = radon ( sinogram , fill_value =- 1000 ) # 2d image with fill value >>> image = radon ( sinogram , axes = ( - 2 , - 1 )) # nd image","title":"Imops"},{"location":"#imops","text":"Efficient parallelizable algorithms for multidimensional arrays to speed up your data pipelines","title":"Imops"},{"location":"#install","text":"pip install imops # default install with Cython backend pip install imops [ numba ] # additionally install Numba backend","title":"Install"},{"location":"#functions","text":"","title":"Functions"},{"location":"#imops.radon.radon","text":"Fast implementation of Radon transform. Adapted from scikit-image. Parameters: Name Type Description Default image np . ndarray an array with at least 2 axes required axes Tuple [ int , int ] the axes in the image along which the Radon transform will be applied. The image shape along the axes must be of the same length None theta Union [ int , Sequence [ float ]] the angles for which the Radon transform will be computed. If it is an integer - the angles will be evenly distributed between 0 and 180, theta values in total 180 return_fill bool whether to return the value that fills the image outside the circle working area False num_threads int the number of threads to be used for parallel computation. By default - equals to the number of cpu cores -1 backend BackendLike the execution backend. Currently only \"Cython\" is avaliable None Returns: Name Type Description sinogram np . ndarray the result of the Radon transform fill_value float the value that fills the image outside the circle working area. Returned only if return_fill is True Examples: >>> sinogram = radon ( image ) # 2d image >>> sinogram , fill_value = radon ( image , return_fill = True ) # 2d image with fill value >>> sinogram = radon ( image , axes = ( - 2 , - 1 )) # nd image","title":"radon()"},{"location":"#imops.radon.inverse_radon","text":"Fast implementation of inverse Radon transform. Adapted from scikit-image. Parameters: Name Type Description Default sinogram np . ndarray an array with at least 2 axes required axes Tuple [ int , int ] the axes in the image along which the Radon transform will be applied. The image shape along the axes must be of the same length None theta Union [ int , Sequence [ float ]] the angles for which the Radon transform will be computed. If it is an integer - the angles will be evenly distributed between 0 and 180, theta values in total 180 fill_value float the value that fills the image outside the circle working area. Can be returned by radon 0 a float the first parameter of the sharpen filter 0 b float the second parameter of the sharpen filter 1 num_threads int the number of threads to be used for parallel computation. By default - equals to the number of cpu cores -1 backend BackendLike the execution backend. Currently only \"Cython\" is avaliable None Returns: Name Type Description image np . ndarray the result of the inverse Radon transform Examples: >>> image = radon ( sinogram ) # 2d image >>> image = radon ( sinogram , fill_value =- 1000 ) # 2d image with fill value >>> image = radon ( sinogram , axes = ( - 2 , - 1 )) # nd image","title":"inverse_radon()"}]}