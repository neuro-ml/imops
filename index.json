{"project": "imops", "project_url": "https://github.com/neuro-ml/imops", "show_commit_url": "https://github.com/neuro-ml/imops/commit", "hash_length": 8, "revision_to_hash": {"17": "c95b45508d8d648246f20dbac8c1deef5e675c60", "35": "e582a46d37c3bf8b9f38b5a05d4bc6ad2a06250b", "44": "69cfbee8dac7852381ee04c402f6581667f49714", "62": "2bfac19cd779afe97e35fa73b8adaa8aaec0198e", "65": "9dbe0b63bf5fb2181e4826ff2612853e5a00f93e", "121": "5de8431cea8447608dbabb2fb6f203edb796abbc", "128": "5235d7170906c9c9397063b6f5644658f7a512c5", "141": "f8e3ecd943a374a88618a605bec067dc7827a9df", "165": "fd5fa8e122fdc165d025a63d2b7aa02ac16c8d3f", "213": "ecdc98be69410bc3580f28869d6a8d0ac80ed1e7", "235": "628d91ec90ccfa4ea80391f42929061da2548cbc", "237": "c2ebd6cba4819d2c971cbd8f9b5599bc185efd4c"}, "revision_to_date": {"17": 1660561803000, "35": 1661797738000, "44": 1662537957000, "62": 1663279542000, "65": 1663331539000, "121": 1664987098000, "128": 1665083494000, "141": 1669926401000, "165": 1673984805000, "213": 1676325578000, "235": 1676894039000, "237": 1676905424000}, "params": {"arch": ["x86_64"], "cpu": ["Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz"], "machine": ["hub"], "num_cpu": ["8"], "os": ["Linux 5.4.0-91-generic"], "ram": ["528029648"], "python": ["3.10"], "numpy": [""], "Cython": [""], "scipy": [""], "scikit-image": [""], "numba": [""], "pip+connected-components-3d": [""], "pip+fastremap": [""], "env-OMP_NUM_THREADS": ["8"], "env-NUMBA_NUM_THREADS": ["8"], "branch": ["master", "dev"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz", "machine": "hub", "num_cpu": "8", "os": "Linux 5.4.0-91-generic", "ram": "528029648", "python": "3.10", "numpy": "", "Cython": "", "scipy": "", "scikit-image": "", "numba": "", "pip+connected-components-3d": "", "pip+fastremap": "", "env-OMP_NUM_THREADS": "8", "env-NUMBA_NUM_THREADS": "8", "branch": "master"}, {"arch": "x86_64", "cpu": "Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz", "machine": "hub", "num_cpu": "8", "os": "Linux 5.4.0-91-generic", "ram": "528029648", "python": "3.10", "numpy": "", "Cython": "", "scipy": "", "scikit-image": "", "numba": "", "pip+connected-components-3d": "", "pip+fastremap": "", "env-OMP_NUM_THREADS": "8", "env-NUMBA_NUM_THREADS": "8", "branch": "dev"}], "benchmarks": {"benchmark_interp1d.Interp1dSuite.peakmem_interp1d": {"code": "class <locals>:\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])\n\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])", "name": "benchmark_interp1d.Interp1dSuite.peakmem_interp1d", "param_names": ["backend", "dtype"], "params": [["Scipy()", "Cython(fast=False)", "Cython(fast=True)", "Numba(parallel=False, nogil=False, cache=False)", "Numba(parallel=False, nogil=False, cache=True)", "Numba(parallel=False, nogil=True, cache=False)", "Numba(parallel=False, nogil=True, cache=True)", "Numba(parallel=True, nogil=False, cache=False)", "Numba(parallel=True, nogil=False, cache=True)", "Numba(parallel=True, nogil=True, cache=False)", "Numba(parallel=True, nogil=True, cache=True)"], ["'float32'", "'float64'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "e35b88bfcab48c190160abc6f162bb78d2ea03d299d688a5ff76f656523fd81e"}, "benchmark_interp1d.Interp1dSuite.time_interp1d": {"code": "class <locals>:\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])\n\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])", "min_run_count": 2, "name": "benchmark_interp1d.Interp1dSuite.time_interp1d", "number": 0, "param_names": ["backend", "dtype"], "params": [["Scipy()", "Cython(fast=False)", "Cython(fast=True)", "Numba(parallel=False, nogil=False, cache=False)", "Numba(parallel=False, nogil=False, cache=True)", "Numba(parallel=False, nogil=True, cache=False)", "Numba(parallel=False, nogil=True, cache=True)", "Numba(parallel=True, nogil=False, cache=False)", "Numba(parallel=True, nogil=False, cache=True)", "Numba(parallel=True, nogil=True, cache=False)", "Numba(parallel=True, nogil=True, cache=True)"], ["'float32'", "'float64'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e35b88bfcab48c190160abc6f162bb78d2ea03d299d688a5ff76f656523fd81e", "warmup_time": -1}, "benchmark_measure.LabelSuite.peakmem_label": {"code": "class LabelSuite:\n    def peakmem_label(self):\n        label(self.image)\n\n    def setup(self):\n        self.image = np.random.randint(0, 5, size=(256, 256, 256))", "name": "benchmark_measure.LabelSuite.peakmem_label", "param_names": [], "params": [], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "b9a45767d301bc7c8484b8285bfd536594cd26eec57c1b37c5a8a01845b5eb5e"}, "benchmark_measure.LabelSuite.peakmem_sk_label": {"code": "class LabelSuite:\n    def peakmem_sk_label(self):\n        sk_label(self.image)\n\n    def setup(self):\n        self.image = np.random.randint(0, 5, size=(256, 256, 256))", "name": "benchmark_measure.LabelSuite.peakmem_sk_label", "param_names": [], "params": [], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "0778da3906c31c72b9b1aa16d70fb1fa32267d56d954439ee21b48d6fcc6037c"}, "benchmark_measure.LabelSuite.time_label": {"code": "class LabelSuite:\n    def time_label(self):\n        label(self.image)\n\n    def setup(self):\n        self.image = np.random.randint(0, 5, size=(256, 256, 256))", "min_run_count": 2, "name": "benchmark_measure.LabelSuite.time_label", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "023a8c011ee80bb9b95218a08d73ceac807601e8a34c8d04042c809b9881e038", "warmup_time": -1}, "benchmark_measure.LabelSuite.time_sk_label": {"code": "class LabelSuite:\n    def time_sk_label(self):\n        sk_label(self.image)\n\n    def setup(self):\n        self.image = np.random.randint(0, 5, size=(256, 256, 256))", "min_run_count": 2, "name": "benchmark_measure.LabelSuite.time_sk_label", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "46cde0df2393c25697e5a480ebfe9028d008ab6cab920f406841d56851425405", "warmup_time": -1}, "benchmark_morphology.MorphologySuite.peakmem_closing": {"code": "class <locals>:\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])\n\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])", "name": "benchmark_morphology.MorphologySuite.peakmem_closing", "param_names": ["backend", "dtype"], "params": [["Scipy()", "Cython(fast=False)", "Cython(fast=True)"], ["'bool'", "'int64'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "e35b88bfcab48c190160abc6f162bb78d2ea03d299d688a5ff76f656523fd81e"}, "benchmark_morphology.MorphologySuite.peakmem_dilation": {"code": "class <locals>:\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])\n\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])", "name": "benchmark_morphology.MorphologySuite.peakmem_dilation", "param_names": ["backend", "dtype"], "params": [["Scipy()", "Cython(fast=False)", "Cython(fast=True)"], ["'bool'", "'int64'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "e35b88bfcab48c190160abc6f162bb78d2ea03d299d688a5ff76f656523fd81e"}, "benchmark_morphology.MorphologySuite.peakmem_erosion": {"code": "class <locals>:\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])\n\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])", "name": "benchmark_morphology.MorphologySuite.peakmem_erosion", "param_names": ["backend", "dtype"], "params": [["Scipy()", "Cython(fast=False)", "Cython(fast=True)"], ["'bool'", "'int64'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "e35b88bfcab48c190160abc6f162bb78d2ea03d299d688a5ff76f656523fd81e"}, "benchmark_morphology.MorphologySuite.peakmem_opening": {"code": "class <locals>:\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])\n\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])", "name": "benchmark_morphology.MorphologySuite.peakmem_opening", "param_names": ["backend", "dtype"], "params": [["Scipy()", "Cython(fast=False)", "Cython(fast=True)"], ["'bool'", "'int64'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "e35b88bfcab48c190160abc6f162bb78d2ea03d299d688a5ff76f656523fd81e"}, "benchmark_morphology.MorphologySuite.time_closing": {"code": "class <locals>:\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])\n\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])", "min_run_count": 2, "name": "benchmark_morphology.MorphologySuite.time_closing", "number": 0, "param_names": ["backend", "dtype"], "params": [["Scipy()", "Cython(fast=False)", "Cython(fast=True)"], ["'bool'", "'int64'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e35b88bfcab48c190160abc6f162bb78d2ea03d299d688a5ff76f656523fd81e", "warmup_time": -1}, "benchmark_morphology.MorphologySuite.time_dilation": {"code": "class <locals>:\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])\n\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])", "min_run_count": 2, "name": "benchmark_morphology.MorphologySuite.time_dilation", "number": 0, "param_names": ["backend", "dtype"], "params": [["Scipy()", "Cython(fast=False)", "Cython(fast=True)"], ["'bool'", "'int64'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e35b88bfcab48c190160abc6f162bb78d2ea03d299d688a5ff76f656523fd81e", "warmup_time": -1}, "benchmark_morphology.MorphologySuite.time_erosion": {"code": "class <locals>:\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])\n\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])", "min_run_count": 2, "name": "benchmark_morphology.MorphologySuite.time_erosion", "number": 0, "param_names": ["backend", "dtype"], "params": [["Scipy()", "Cython(fast=False)", "Cython(fast=True)"], ["'bool'", "'int64'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e35b88bfcab48c190160abc6f162bb78d2ea03d299d688a5ff76f656523fd81e", "warmup_time": -1}, "benchmark_morphology.MorphologySuite.time_opening": {"code": "class <locals>:\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])\n\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])", "min_run_count": 2, "name": "benchmark_morphology.MorphologySuite.time_opening", "number": 0, "param_names": ["backend", "dtype"], "params": [["Scipy()", "Cython(fast=False)", "Cython(fast=True)"], ["'bool'", "'int64'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e35b88bfcab48c190160abc6f162bb78d2ea03d299d688a5ff76f656523fd81e", "warmup_time": -1}, "benchmark_radon.RadonSuite.peakmem_inverse_radon": {"code": "class <locals>:\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])\n\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])", "name": "benchmark_radon.RadonSuite.peakmem_inverse_radon", "param_names": ["backend", "dtype"], "params": [["Cython(fast=False)", "Cython(fast=True)", "'Scipy()'"], ["'float32'", "'float64'"]], "timeout": 300, "type": "peakmemory", "unit": "bytes", "version": "e35b88bfcab48c190160abc6f162bb78d2ea03d299d688a5ff76f656523fd81e"}, "benchmark_radon.RadonSuite.peakmem_radon": {"code": "class <locals>:\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])\n\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])", "name": "benchmark_radon.RadonSuite.peakmem_radon", "param_names": ["backend", "dtype"], "params": [["Cython(fast=False)", "Cython(fast=True)", "'Scipy()'"], ["'float32'", "'float64'"]], "timeout": 300, "type": "peakmemory", "unit": "bytes", "version": "e35b88bfcab48c190160abc6f162bb78d2ea03d299d688a5ff76f656523fd81e"}, "benchmark_radon.RadonSuite.time_inverse_radon": {"code": "class <locals>:\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])\n\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])", "min_run_count": 2, "name": "benchmark_radon.RadonSuite.time_inverse_radon", "number": 0, "param_names": ["backend", "dtype"], "params": [["Cython(fast=False)", "Cython(fast=True)", "'Scipy()'"], ["'float32'", "'float64'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 300, "type": "time", "unit": "seconds", "version": "e35b88bfcab48c190160abc6f162bb78d2ea03d299d688a5ff76f656523fd81e", "warmup_time": -1}, "benchmark_radon.RadonSuite.time_radon": {"code": "class <locals>:\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])\n\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])", "min_run_count": 2, "name": "benchmark_radon.RadonSuite.time_radon", "number": 0, "param_names": ["backend", "dtype"], "params": [["Cython(fast=False)", "Cython(fast=True)", "'Scipy()'"], ["'float32'", "'float64'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 300, "type": "time", "unit": "seconds", "version": "e35b88bfcab48c190160abc6f162bb78d2ea03d299d688a5ff76f656523fd81e", "warmup_time": -1}, "benchmark_zoom.ZoomSuite.peakmem_zoom": {"code": "class <locals>:\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])\n\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])", "name": "benchmark_zoom.ZoomSuite.peakmem_zoom", "param_names": ["backend", "dtype"], "params": [["Scipy()", "Cython(fast=False)", "Cython(fast=True)", "Numba(parallel=False, nogil=False, cache=False)", "Numba(parallel=False, nogil=False, cache=True)", "Numba(parallel=False, nogil=True, cache=False)", "Numba(parallel=False, nogil=True, cache=True)", "Numba(parallel=True, nogil=False, cache=False)", "Numba(parallel=True, nogil=False, cache=True)", "Numba(parallel=True, nogil=True, cache=False)", "Numba(parallel=True, nogil=True, cache=True)"], ["'float32'", "'float64'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "e35b88bfcab48c190160abc6f162bb78d2ea03d299d688a5ff76f656523fd81e"}, "benchmark_zoom.ZoomSuite.time_zoom": {"code": "class <locals>:\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])\n\n    def wrapper(*args):\n        nonlocal idx\n        if idx < 0:\n            idx = len(args) + idx\n        return f(*args[:idx], *args[idx + 1 :])", "min_run_count": 2, "name": "benchmark_zoom.ZoomSuite.time_zoom", "number": 0, "param_names": ["backend", "dtype"], "params": [["Scipy()", "Cython(fast=False)", "Cython(fast=True)", "Numba(parallel=False, nogil=False, cache=False)", "Numba(parallel=False, nogil=False, cache=True)", "Numba(parallel=False, nogil=True, cache=False)", "Numba(parallel=False, nogil=True, cache=True)", "Numba(parallel=True, nogil=False, cache=False)", "Numba(parallel=True, nogil=False, cache=True)", "Numba(parallel=True, nogil=True, cache=False)", "Numba(parallel=True, nogil=True, cache=True)"], ["'float32'", "'float64'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e35b88bfcab48c190160abc6f162bb78d2ea03d299d688a5ff76f656523fd81e", "warmup_time": -1}}, "machines": {"hub": {"arch": "x86_64", "cpu": "Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz", "machine": "hub", "num_cpu": "8", "os": "Linux 5.4.0-91-generic", "ram": "528029648", "version": 1}}, "tags": {"v0.1.0": 17, "v0.2.0": 35, "v0.3.0": 44, "v0.4.0": 62, "v0.4.1": 65, "v0.5.0": 121, "v0.5.0.post1": 128, "v0.6.0": 141, "v0.7.0": 165, "v0.7.1": 213}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}